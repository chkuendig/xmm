/**
 * @(#)MovieManagerCommandExportToSimpleXHTML.java 1.1 26.09.06 (dd.mm.yy)
 *
 * Copyright (2003) Bro3
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2, or any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Boston, MA 02111.
 * 
 * Contact: bro3@users.sourceforge.net
 **/

package net.sf.xmm.moviemanager.commands;

import net.sf.xmm.moviemanager.DialogQuestion;
import net.sf.xmm.moviemanager.MovieManager;
import net.sf.xmm.moviemanager.util.*;

import java.io.File;
import java.io.FileWriter;

import javax.swing.DefaultListModel;

import net.sf.xmm.moviemanager.swing.extentions.ExtendedFileChooser;
import net.sf.xmm.moviemanager.models.ModelMovie;

import org.apache.log4j.Logger;

public class MovieManagerCommandExportToSimpleXHTML {
    
    static Logger log = Logger.getRootLogger();
    
    static String title;
    static String sortBy;
    static DefaultListModel listModel;
    
    public MovieManagerCommandExportToSimpleXHTML(String _title, DefaultListModel _listModel) {
	title = _title;
	listModel = _listModel;
    }
    
    /**
     * Exports the content of the database to html (just title and imdb link)...
     **/
    protected static void export(File xhtmlFile) {
	try {
	
	    FileWriter writer = new FileWriter(xhtmlFile);
	    /* The html header... */      
	    writer.write(
			 "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"+
			 "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n"+
			 "<head>\n"+
			 "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\" />\n"+
			 "<title>Movies List (Simple View) - Generated by MeD's Movie Manager</title>\n"+
			 "</head>\n"+
			 "<body>\n"+
			 "<br /><CENTER><font size=\"+3\">"+ title +"  "+ "</font></CENTER><br /><br /><br /><br />\n"+
			 "<!-- START Movies Description... -->\n"+
			 "\n"+
			 "<ol>\n");
	    /* Used vars... */
	    String imdb = "imdb";
	    String title = "title";
      
	    /* For each movie.... */
	    DefaultListModel listModel = MovieManager.getIt().getDatabase().getMoviesList(sortBy);
      
	    for (int i = 0; i < listModel.getSize(); i++) {
		ModelMovie model = (ModelMovie) listModel.elementAt(i);
		
		imdb = model.getUrlKey();
		title = model.getTitle()+" ("+ model.getDate() +")";
		
		if (!imdb.equals("")) {
		    writer.write(
				 "  <li><a href=\"http://www.imdb.com/Title?"+imdb+"\" target=\"_blank\" title=\"Jump to IMDB ("+imdb+")\">"+title+"</a></li>\n");
		} else {
		    writer.write(
				 "  <li>"+title+"</li>\n");
		}
	    }
	    /* The html ending...*/
	    writer.write(
			 "</ol>\n"+
			 "\n"+
			 "<!-- END Movies Description... -->\n"+
			 "</html>\n");
	    writer.close();
	} catch (Exception e) {
	    log.error("", e);
	}
    }
    
    /**
     * Executes the command.
     **/
    public void execute() {
	/* Opens the Export to HTML dialog... */
	ExtendedFileChooser fileChooser = new ExtendedFileChooser();
	fileChooser.setFileFilter(new CustomFileFilter(new String[]{"xhtml"},new String("XHTML Files (*.xhtml)")));
    
	if (MovieManager.getConfig().getLastMiscDir() != null) {
	    fileChooser.setCurrentDirectory(MovieManager.getConfig().getLastMiscDir());
	}
	fileChooser.setDialogTitle("Export to XHTML - Simple");
	fileChooser.setApproveButtonToolTipText("Export to file");
	fileChooser.setAcceptAllFileFilterUsed(false);
	int returnVal = fileChooser.showDialog(MovieManager.getDialog(), "Export");
    
	while (returnVal == ExtendedFileChooser.APPROVE_OPTION) {
	    /* Gets the path... */
	    String path = fileChooser.getSelectedFile().getAbsolutePath().replaceAll(fileChooser.getSelectedFile().getName(),"");
	    String fileName = fileChooser.getSelectedFile().getName();
	    if (!fileName.endsWith(".xhtml")) {
		fileName = fileName + ".xhtml";
	    }
	
	    /* Creates the movielist file... */
	    File xhtmlFile = new File(path+fileName);
	
	    if (xhtmlFile.exists()) {
		DialogQuestion question = new DialogQuestion("File already exists", "A file with the chosen filename already exists. Would you like to overwrite the old file?");
		GUIUtil.showAndWait(question, true);
	    
		if (question.getAnswer()) {
		    xhtmlFile.delete();
		    export(xhtmlFile);
		    break;
		}
	    
		else {
		    returnVal = fileChooser.showOpenDialog(MovieManager.getDialog());
		}
	    }
	    else {
		export(xhtmlFile);
		break;
	    }
	}
    
	/* Sets the last path... */
	MovieManager.getConfig().setLastMiscDir(fileChooser.getCurrentDirectory());
    }
}
