<?xml version="1.0" encoding="iso-8859-1" standalone="yes" ?>

<project name="MeDs Movie Manager Project" default="welcome" basedir="">
  <description>
	MeDs Movie Manager build file
  </description>
  
  <target name="welcome">
	<echo>
	  =====================================
	  === MeD's Movie Manager build.xml ===
	  =====================================
	  
	  targets available:
	  ==================
	  clean                clears all generated files
	  compile              compiles all java files
	  javadoc              compiles the Javadoc
	  all                  builds everything
	  makejar              creates the MovieManager.jar
	  run                  runs the moviemanager
	  create-archives      creates the zip files
	  izpackinstaller      creates the izpack java installer
	</echo>
  </target>
  
  <!-- set global properties for this build -->
  
  <property name="build" location="MovieManager/"/>
  <property name="dist"  location="dist"/>
  <property name="izpack.dir" location="izpack"/>
  <property name="version"  value="2.5.4.1"/>
  <property name="base" value="MovieManager/"/>
  


  <!-- <property name="$(base)/base.dir"  location=""/> -->
  <property name="source"  value="$(base)/source/"/>
  
  

   <path id="izpack.claspath">
	<fileset dir="${izpack.dir}/lib/">
	  <include name="*.jar"/>
	</fileset>
  </path>


  <path id="project.lib.path">
	<fileset dir="${base}/lib/">
	  <include name="**/*.jar"/>
	  <include name="*.jar"/>
	</fileset>
  </path>
  
  
  <path id="project.classpath">
	<pathelement path="${classes}"/>
	<path refid="project.lib.path"/>
  </path>  
  
  
  <target name="run" depends="compile"
		  description="Runs the compiled moviemanager">
	<java
		classname="net.sf.xmm.moviemanager.MovieManager"
		classpathref="project.lib.path"
		classpath="MovieManager/"
		fork="true" spawn="true"/>
  </target>
  
  
  <target name="compile" 
		  description="Compiles code, output goes to the build dir.">
	<javac srcdir="MovieManager/source" 
		   classpathref="project.classpath" 
		   destdir="${build}" source="1.4" target="1.4">
	</javac>
  </target>
  
  
  <!-- removes all tabs replaces those with spaces and removes unqualified EOL
	   and replaces those with the correct EOL -->
  <target name="remove-crlf" description="removes all tabs and 
														 unqualified end of lines">
	<fixcrlf srcdir="${source}"
			 eol="lf"
			 tab="remove"
			 tablength="4"
			 javafiles="yes"
			 includes="**/*.java"
			 />
  </target>
  
  
  <target name="makejar" 
		  description="Compiles code, output goes to the build dir."
		  depends="compile">
	
	<!-- Ensure that the timestamp has been set -->
	<tstamp/>
	
	<jar destfile="MovieManager/MovieManager.jar" manifest="Manifest.txt">
	  
	  <fileset dir="MovieManager/">
		
		<include name="net/"/>
		<include name="codecs/"/>
		<include name="images/"/>
		<include name="queries/"/>
		<include name="MovieManager.tmx"/>
	  </fileset>
	  
	  <manifest>
		<attribute name="Built-By" value="${user.name} on ${TODAY}"/>
	  </manifest>
	  
	</jar>
  </target>
  
  
  <target name="all"
		  description="generate the distribution" >

	<!-- Cleans up  first -->
	<antcall target="clean" />

	<!-- Create the distribution directory -->
	<echo>Creating directory:${dist}</echo>
	
	<!-- Builds the thing -->
	<antcall target="build" />
	<antcall target="create-archives" />
	<antcall target="makeIzpackInstaller" />
	
  </target>
  
  
  <target name="build" 
		  description="generate the distribution" 
		  depends="compile, makejar">
	<tstamp/>
	
  </target>
  
  

 
	

  
  <target name="create-archives" 
		  description="Creates the ZIP archives.">
	
	<mkdir dir="${dist}"/>
	
	<antcall target="makeLooAndFeelIni"/>

	<!-- Creating Binary zip MovieManager.v.version.bin.zip  Mirror  -->
	<zip destfile="${dist}/MovieManager.v.${version}.bin.zip"
		 update="false"
		 compress="true" >
	  
	  <!-- Files in root dir (install dir) -->
	  <zipfileset prefix="MeDs-Movie-Manager" dir="MovieManager" 
				  includes="castor.properties, 
							Icon.ico,
							log4j.properties, 
							mapping.xml, 
							MovieManager.exe, 
							MovieManager.jar, 
							MovieManager.tmx, 
							Temp.mdb">

		<include name="lib/"/>
		<include name="reports/"/>
		
	  </zipfileset>
	  
	  <!-- Look & Feels -->
	  <zipfileset prefix="MeDs-Movie-Manager/LookAndFeels/" 
				  dir="MovieManager/LookAndFeels/" 
				  includes="JTattoo-1.2.2.jar,
							kunststoff.jar,
							looks-2.1.4.jar,
							OfficeLnFs_2.6.jar,
							substance-lite-3.3.jar,
							synthetica.2.3.0.jar,
							syntheticaBlackMoon.jar,
							syntheticaBlackStar.jar,
							syntheticaBlueIce.jar,
							syntheticaBlueMoon.jar,
							syntheticaBlueSteel.jar,
							syntheticaGreenDream.jar,
							syntheticaSilverMoon.jar
							">
							
		
		<include name="Oyoaha Theme Packs/"/>
		<include name="Skinlf Theme Packs/"/>
		
	  </zipfileset>

	  <zipfileset prefix="MeDs-Movie-Manager/LookAndFeels/" 
				  dir="${dist}" 
				  includes="lookAndFeels.ini">
	  </zipfileset>
	  
	  
	  <zipfileset prefix="MeDs-Movie-Manager" dir="">
		<include name="License/"/>
		<include name="Readme.rtf"/>
		<include name="Readme.txt"/>
		<include name="Changelog.txt"/>
	  </zipfileset>
	  
	</zip>
	
	<!-- Creating Source zip MovieManager.v.version.src.zip  Mirror  -->
	<zip destfile="${dist}/MovieManager.v.${version}.src.zip"
		 update="false"
		 compress="true" >
	  
	  <zipfileset prefix="MeDs-Movie-Manager-Source/MovieManager" 
				  dir="MovieManager" 
				  includes="castor.properties, 
							Icon.ico, 
							log4j.properties, 
							mapping.xml, 
							MovieManager.exe, 
							MovieManager.jar, 
							MovieManager.tmx, 
							Temp.mdb">
		
		<include name="lib/"/>
		<include name="reports/"/>
		<include name="codecs/"/>
		<include name="images/"/>
		<include name="queries/"/>
		<include name="source/"/>
		
	  </zipfileset>
	  
	  <zipfileset prefix="MeDs-Movie-Manager-Source/MovieManager/LookAndFeels/" 
				  dir="MovieManager/LookAndFeels/" 
				  includes="JTattoo-1.2.2.jar,
							kunststoff.jar,
							looks-2.1.4.jar,
							OfficeLnFs_2.6.jar,
							substance-lite-3.3.jar,
							synthetica.2.3.0.jar,
							syntheticaBlackMoon.jar,
							syntheticaBlackStar.jar,
							syntheticaBlueIce.jar,
							syntheticaBlueMoon.jar,
							syntheticaBlueSteel.jar,
							syntheticaGreenDream.jar,
							syntheticaSilverMoon.jar
							">
		
		<include name="Oyoaha Theme Packs/"/>
		<include name="Skinlf Theme Packs/"/>
		
	  </zipfileset>
	  
	  
	  <zipfileset prefix="MeDs-Movie-Manager-Source/MovieManager/LookAndFeels/" 
				  dir="${dist}" 
				  includes="lookAndFeels.ini">
	  </zipfileset>
	  
	  
	  <zipfileset prefix="MeDs-Movie-Manager-Source" dir="">
		<include name="License/"/>
		<include name="izpack/"/>
		<include name="Readme.rtf"/>
		<include name="Readme.txt"/>
		<include name="Changelog.txt"/>
		<include name="makejar.bat"/>
		<include name="compile.bat"/>
		<include name="run.bat"/>
		<include name="SignJar.bat"/>
		<include name="makejar.sh"/>
		<include name="compile.sh"/>
		<include name="run.sh"/>
		<include name="Manifest.txt"/>
		<include name="build.xml"/>
		<include name="build-xmm.xml"/>
		<include name="So how do I get this thing running.txt"/>
		<include name=".classpath"/>
		<include name=".project"/>
		
		<exclude name="dist/"/>
	  </zipfileset>
	  
	</zip>
  </target>
  
  
  <!-- when called from command line dist must be created and makeLooAndFeelIni called -->
  <target name="izpackinstaller" 
		  description="Creates the izPack installer.">
	
	<mkdir dir="${dist}"/>
	<antcall target="makeLooAndFeelIni"/>
	<antcall target="makeIzpackInstaller"/>
	
  </target>
  

   <!-- create the izpack java installer -->
  <target name="makeIzpackInstaller" 
		  description="Creates the izPack installer.">
	
	<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask">
		<classpath refid="izpack.claspath"/>
    </taskdef>


	<izpack input="${izpack.dir}/build-izpack.xml"
			output="${dist}/MovieManager.v.${version}.bin.installer.jar"
			installerType="standard" basedir="."
			izPackDir="${izpack.dir}"/>
	
  </target>
  

  
  <!-- generates the javadoc -->
  <target name="javadoc" depends="compile">
	
	<mkdir dir="${dist}/javadoc/"/>
	
	<javadoc 
		destdir="${dist}/javadoc/"
		author="true"
		version="true"
		private="true"
		use="true"
		windowtitle="MeD's Movie Manager Javadoc"
		classpathref="project.classpath" 
		
		sourcepath="MovieManager/source/"  packagenames="net.sf.*">
	  <doctitle>MeD's Movie Manager API Documentation</doctitle>
	</javadoc>
  </target> 
  
  
  
  <target name="clean"
		  description="clean up" >
	<!-- Delete the ${dist} directory trees -->
	<delete dir="${build}/net/"/>
	<delete dir="${dist}"/>
	<delete file="${build}/MovieManager.jar"/>
  </target>
  
  
  
  <!--  For signing java applet  -->
  
  <target name="sign" depends="makejar, generate-keys"
		  description="Signs the generated jar file">
	<signjar
		jar="${base}/MovieManager.jar"
		keystore="keys"
		storepass="${storepass}"
		keypass="${keypass}"
		signedjar="MovieManager.jar"
		alias="signFiles"
		/>
	<exec executable="keytool">
	  <arg line="-export"/>
	  <arg line="-keystore keys"/>
	  <arg line="-storepass ${storepass}"/>
	  <arg line="-alias signFiles"/>
	  <arg line="-file MovieManager.cer"/>
	</exec>
	<delete file="${base}/MovieManager.jar"/>
	<delete file="${base}/MovieManager.cer"/>
	<move file="MovieManager.jar" todir="${base}"/>
	<move file="MovieManager.cer" todir="${base}"/>
  </target>
  
  <target name="generate-keys"
		  description="Generates keys if they don't exist"
		  unless="keys">
	<genkey
		alias="signFiles"
		keystore="keys"
		keypass="${keypass}"
		storepass="${storepass}"
		dname="CN=MeDs Movie Manager, OU=MeD's Movie Manager, O=xmm.sf.net, C=INT"
		/>
  </target>
  



  <target name="makeLooAndFeelIni" 
		  description="generate the distribution" >
	<!--	  depends="compile, makejar" -->
	
	<echo file="${dist}/lookAndFeels.ini" append="false">
Here you can add new Look and Feels's.
Make sure the look and Feel jar-file is placed in the 'LookAndFeels' directory 
and that the correct class is given below.
The name and classname must be enclosed in quotes.
The names may be set to whatever fit your needs.

Example:

"Metal look and feel"                 "javax.swing.plaf.metal.MetalLookAndFeel"
"Windows look and feel"               "com.sun.java.swing.plaf.windows.WindowsLookAndFeel"

The metal and windows look and feels are preinstalled.
Define the look and feels below:
#

"Kunststoff"			              "com.incors.plaf.kunststoff.KunststoffLookAndFeel"

"Jgoodies windows"		              "com.jgoodies.looks.windows.WindowsLookAndFeel"
"Jgoodies Plastic"		              "com.jgoodies.looks.plastic.PlasticLookAndFeel"
"Jgoodies Plastic 3D"		          "com.jgoodies.looks.plastic.Plastic3DLookAndFeel"
"Jgoodies PlasticXP"		          "com.jgoodies.looks.plastic.PlasticXPLookAndFeel"

"Office 2003"			              "org.fife.plaf.Office2003.Office2003LookAndFeel"
"Office XP"			                  "org.fife.plaf.OfficeXP.OfficeXPLookAndFeel"
"Office VisualStudio 2005"	          "org.fife.plaf.VisualStudio2005.VisualStudio2005LookAndFeel"

"Substance - FieldOfWheat"            "org.jvnet.substance.skin.SubstanceFieldOfWheatLookAndFeel"
"Substance - Mango"	                  "org.jvnet.substance.skin.SubstanceMangoLookAndFeel"
"Substance - GreenMagic"              "org.jvnet.substance.skin.SubstanceGreenMagicLookAndFeel"
"Substance - OfficeBlue2007"          "org.jvnet.substance.skin.SubstanceOfficeBlue2007LookAndFeel"
"Substance - EmeraldDusk"             "org.jvnet.substance.skin.SubstanceEmeraldDuskLookAndFeel"
"Substance - ChallengerDeep"          "org.jvnet.substance.skin.SubstanceChallengerDeepLookAndFeel"
"Substance - Magma"	                  "org.jvnet.substance.skin.SubstanceMagmaLookAndFeel"
"Substance - Raven"	                  "org.jvnet.substance.skin.SubstanceRavenLookAndFeel"
"Substance - OfficeSilver2007"        "org.jvnet.substance.skin.SubstanceOfficeSilver2007LookAndFeel"
"Substance - Moderate"                "org.jvnet.substance.skin.SubstanceModerateLookAndFeel"
"Substance - Sahara"   	              "org.jvnet.substance.skin.SubstanceSaharaLookAndFeel"
"Substance - Creme"   	              "org.jvnet.substance.skin.SubstanceCremeLookAndFeel"
"Substance - Business"                "org.jvnet.substance.skin.SubstanceBusinessLookAndFeel"
"Substance - Business blue"           "org.jvnet.substance.skin.SubstanceBusinessBlueLookAndFeel"
"Substance - Autumn"                  "org.jvnet.substance.skin.SubstanceAutumnLookAndFeel"

"JTattoo - Acryl" 	                  "com.jtattoo.plaf.acryl.AcrylLookAndFeel"
"JTattoo - Aero" 	                  "com.jtattoo.plaf.aero.AeroLookAndFeel"
"JTattoo - Aluminium" 	              "com.jtattoo.plaf.aluminium.AluminiumLookAndFeel"
"JTattoo - Bernstein" 	              "com.jtattoo.plaf.bernstein.BernsteinLookAndFeel"
"JTattoo - Fast" 	                  "com.jtattoo.plaf.fast.FastLookAndFeel"
"JTattoo - HiFi" 	                  "com.jtattoo.plaf.hifi.HiFiLookAndFeel" 
"JTattoo - McWin" 	                  "com.jtattoo.plaf.mcwin.McWinLookAndFeel"
"JTattoo - Mint" 	                  "com.jtattoo.plaf.mint.MintLookAndFeel"
"JTattoo - Noire" 	                  "com.jtattoo.plaf.mint.MintLookAndFeel"
"JTattoo - Smart" 	                  "com.jtattoo.plaf.smart.SmartLookAndFeel"
"JTattoo - Luna" 	                  "com.jtattoo.plaf.luna.LunaLookAndFeel"

"Synetetica Standard"  	              "de.javasoft.plaf.synthetica.SyntheticaStandardLookAndFeel"
"Synetetica BlackStar"                "de.javasoft.plaf.synthetica.SyntheticaBlackStarLookAndFeel"
"Synetetica greendream"               "de.javasoft.plaf.synthetica.SyntheticaGreenDreamLookAndFeel"
"Synetetica BlueSteel" 	              "de.javasoft.plaf.synthetica.SyntheticaBlueSteelLookAndFeel"
"Synetetica BlackMoon"                "de.javasoft.plaf.synthetica.SyntheticaBlackMoonLookAndFeel"
"Synetetica BlueMoon"                 "de.javasoft.plaf.synthetica.SyntheticaBlueMoonLookAndFeel"
"Synetetica SilverMoon"               "de.javasoft.plaf.synthetica.SyntheticaSilverMoonLookAndFeel"
"Synetetica BlueIce"	              "de.javasoft.plaf.synthetica.SyntheticaBlueIceLookAndFeel"
"Synetetica GreenDream"	              "de.javasoft.plaf.synthetica.SyntheticaGreenDreamLookAndFeel"
</echo>
	
  </target>

</project>




